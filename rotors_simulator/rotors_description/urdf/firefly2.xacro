<?xml version="1.0"?>
<!--
  Copyright 2015 Fadri Furrer, ASL, ETH Zurich, Switzerland
  Copyright 2015 Michael Burri, ASL, ETH Zurich, Switzerland
  Copyright 2015 Mina Kamel, ASL, ETH Zurich, Switzerland
  Copyright 2015 Janosch Nikolic, ASL, ETH Zurich, Switzerland
  Copyright 2015 Markus Achtelik, ASL, ETH Zurich, Switzerland

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
--> 
 
<robot name="firefly" xmlns:xacro="http://ros.org/wiki/xacro">
	<!-- Properties -->
	<xacro:property name="namespace" value="$(arg mav_name)" />
	<xacro:property name="rotor_velocity_slowdown_sim" value="10" />
	<xacro:property name="use_mesh_file" value="true" />
	<xacro:property name="mesh_file" value="package://rotors_description/meshes/firefly.dae"/>
	<xacro:property name="mass" value="1.5" />
	<xacro:property name="body_width" value="0.1" />
	<xacro:property name="body_height" value="0.16" />
	<xacro:property name="mass_rotor" value="0.005" />
	<xacro:property name="arm_length" value="0.215" />
	<xacro:property name="rotor_offset_top" value="0.037" />
	<xacro:property name="radius_rotor" value="0.1" />
	<xacro:property name="motor_constant" value="8.54858e-06" />
	<xacro:property name="moment_constant" value="0.016" />
	<xacro:property name="time_constant_up" value="0.0125" />
	<xacro:property name="time_constant_down" value="0.025" />
	<xacro:property name="max_rot_velocity" value="838" />
	<xacro:property name="sin30" value="0.5" />
	<xacro:property name="cos30" value="0.866025403784" />
	<xacro:property name="rotor_drag_coefficient" value="8.06428e-05" />
	<xacro:property name="rolling_moment_coefficient" value="0.000001" />
	
	<xacro:property name="PI" value="3.1415926535897931"/>
	<xacro:property name="masslink" value="0.01" />
	<xacro:property name="width" value="0.005" />
	<xacro:property name="height1" value="0.05" />
	<xacro:property name="height2" value="0.05" />
	<xacro:property name="height3" value="0.05" />
	<xacro:property name="height4" value="0.03" />
	<xacro:property name="height5" value="0.03" />
	<xacro:property name="height6" value="0.03" />
	<xacro:property name="camera_link" value="0.005" />
	<xacro:property name="axel_offset" value="0.005" />
	<!-- Space btw top of beam and the each joint -->
	
	
	
	<!-- Property Blocks -->
	<xacro:property name="body_inertia">
		<inertia ixx="0.0347563" ixy="0.0" ixz="0.0" iyy="0.0458929" iyz="0.0" izz="0.0977"
			/>
		<!-- [kg m^2] [kg m^2] [kg m^2] [kg m^2] [kg m^2] [kg m^2] -->
	</xacro:property>
	
	<!-- inertia of a single rotor, assuming it is a cuboid. Height=3mm, width=15mm -->
	<xacro:property name="rotor_inertia">
		<xacro:box_inertia x="${radius_rotor}" y="0.015" z="0.003" mass="${mass_rotor*rotor_velocity_slowdown_sim}"
			/>
	</xacro:property>
	
	
	
	<!-- Included URDF Files -->
	<xacro:include filename="$(find rotors_description)/urdf/multirotor_base.xacro" />
	
	<!-- Instantiate multirotor_base_macro once -->
	<xacro:multirotor_base_macro robot_namespace="${namespace}" mass="${mass}" body_width="${body_width}"
		body_height="${body_height}" use_mesh_file="${use_mesh_file}" mesh_file="${mesh_file}"
		>
		<xacro:insert_block name="body_inertia" />
	</xacro:multirotor_base_macro>
	
	<!-- Instantiate rotors -->
	<xacro:vertical_rotor robot_namespace="${namespace}" suffix="front_left" direction="ccw"
		motor_constant="${motor_constant}" moment_constant="${moment_constant}" parent="${namespace}/base_link"
		mass_rotor="${mass_rotor}" radius_rotor="${radius_rotor}" time_constant_up="${time_constant_up}"
		time_constant_down="${time_constant_down}" max_rot_velocity="${max_rot_velocity}"
		motor_number="0" rotor_drag_coefficient="${rotor_drag_coefficient}" rolling_moment_coefficient="${rolling_moment_coefficient}"
		color="Red" use_own_mesh="false" mesh="">
		<origin xyz="${cos30*arm_length} ${sin30*arm_length} ${rotor_offset_top}" rpy="0 0
			0" />
		<xacro:insert_block name="rotor_inertia" />
	</xacro:vertical_rotor>
	
	<xacro:vertical_rotor robot_namespace="${namespace}" suffix="left" direction="cw"
		motor_constant="${motor_constant}" moment_constant="${moment_constant}" parent="${namespace}/base_link"
		mass_rotor="${mass_rotor}" radius_rotor="${radius_rotor}" time_constant_up="${time_constant_up}"
		time_constant_down="${time_constant_down}" max_rot_velocity="${max_rot_velocity}"
		motor_number="1" rotor_drag_coefficient="${rotor_drag_coefficient}" rolling_moment_coefficient="${rolling_moment_coefficient}"
		color="Blue" use_own_mesh="false" mesh="">
		<origin xyz="0 ${arm_length} ${rotor_offset_top}" rpy="0 0 0" />
		<xacro:insert_block name="rotor_inertia" />
	</xacro:vertical_rotor>
	
	<xacro:vertical_rotor robot_namespace="${namespace}" suffix="back_left" direction="ccw"
		motor_constant="${motor_constant}" moment_constant="${moment_constant}" parent="${namespace}/base_link"
		mass_rotor="${mass_rotor}" radius_rotor="${radius_rotor}" time_constant_up="${time_constant_up}"
		time_constant_down="${time_constant_down}" max_rot_velocity="${max_rot_velocity}"
		motor_number="2" rotor_drag_coefficient="${rotor_drag_coefficient}" rolling_moment_coefficient="${rolling_moment_coefficient}"
		color="Blue" use_own_mesh="false" mesh="">
		<origin xyz="-${cos30*arm_length} ${sin30*arm_length} ${rotor_offset_top}" rpy="0
			0 0" />
		<xacro:insert_block name="rotor_inertia" />
	</xacro:vertical_rotor>
	
	<xacro:vertical_rotor robot_namespace="${namespace}" suffix="back_right" direction="cw"
		motor_constant="${motor_constant}" moment_constant="${moment_constant}" parent="${namespace}/base_link"
		mass_rotor="${mass_rotor}" radius_rotor="${radius_rotor}" time_constant_up="${time_constant_up}"
		time_constant_down="${time_constant_down}" max_rot_velocity="${max_rot_velocity}"
		motor_number="3" rotor_drag_coefficient="${rotor_drag_coefficient}" rolling_moment_coefficient="${rolling_moment_coefficient}"
		color="Blue" use_own_mesh="false" mesh="">
		<origin xyz="-${cos30*arm_length} -${sin30*arm_length} ${rotor_offset_top}" rpy="0
			0 0" />
		<xacro:insert_block name="rotor_inertia" />
	</xacro:vertical_rotor>
	
	<xacro:vertical_rotor robot_namespace="${namespace}" suffix="right" direction="ccw"
		motor_constant="${motor_constant}" moment_constant="${moment_constant}" parent="${namespace}/base_link"
		mass_rotor="${mass_rotor}" radius_rotor="${radius_rotor}" time_constant_up="${time_constant_up}"
		time_constant_down="${time_constant_down}" max_rot_velocity="${max_rot_velocity}"
		motor_number="4" rotor_drag_coefficient="${rotor_drag_coefficient}" rolling_moment_coefficient="${rolling_moment_coefficient}"
		color="Blue" use_own_mesh="false" mesh="">
		<origin xyz="0 -${arm_length} ${rotor_offset_top}" rpy="0 0 0" />
		<xacro:insert_block name="rotor_inertia" />
	</xacro:vertical_rotor>
	
	<xacro:vertical_rotor robot_namespace="${namespace}" suffix="front_right" direction="cw"
		motor_constant="${motor_constant}" moment_constant="${moment_constant}" parent="${namespace}/base_link"
		mass_rotor="${mass_rotor}" radius_rotor="${radius_rotor}" time_constant_up="${time_constant_up}"
		time_constant_down="${time_constant_down}" max_rot_velocity="${max_rot_velocity}"
		motor_number="5" rotor_drag_coefficient="${rotor_drag_coefficient}" rolling_moment_coefficient="${rolling_moment_coefficient}"
		color="Red" use_own_mesh="false" mesh="">
		<origin xyz="${cos30*arm_length} -${sin30*arm_length} ${rotor_offset_top}" rpy="0
			0 0" />
		<xacro:insert_block name="rotor_inertia" />
	</xacro:vertical_rotor>
	
	
	<!-- This is to add the dummy link and joint for Camera -->
	<joint name="camera_joint" type="fixed">
		<axis xyz="0 1 0" />
		<origin xyz="0.1 0 1" rpy="0 0 0"/>
		<parent link="${namespace}/base_link"/>
		<child link="camera_link"/>
	</joint>
	
	<link name="camera_link">
		<collision>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<geometry>
				<box size="0.01 0.01 0.01"/>
			</geometry>
		</collision>
		
		<visual>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<geometry>
				<box size="0.01 0.01 0.01"/>
			</geometry>
			<material name="red"/>
		</visual>
		
		<inertial>
			<mass value="1e-5" />
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
		</inertial>
	</link>
	<!-- Camera ends here -->
	
	
	<!-- ARM MODEL BELOW -->
	<joint name="fixed" type="fixed">
		<parent link="${namespace}/base_link"/>
		<child link="${namespace}/linkbase"/>
	</joint>
	
	<!-- Base Link -->
	<link name="${namespace}/linkbase">
		<collision>
			<origin xyz="0.0 0.0 -0.03" rpy="0.0 0.0 0.0"/>
			<geometry>
				<box size="${width} ${width} ${height1}"/>
			</geometry>
		</collision>
		<visual>
			<origin xyz="0.0 0.0 -0.03" rpy="0.0 0.0 0.0"/>
			<geometry>
				<box size="${width} ${width} ${height1}"/>
			</geometry>
			<material name="orange"/>
		</visual>
		
		<inertial>
			<origin xyz="0.0 0.0 -0.03" rpy="0.0 0.0 0.0"/>
			<mass value="${masslink}"/>
			<inertia ixx="${masslink / 12.0 * (width*width + height1*height1)}" ixy="0.0" ixz="0.0"
				iyy="${masslink / 12.0 * (height1*height1 + width*width)}" iyz="0.0" izz="${masslink
				/ 12.0 * (width*width + width*width)}"/>
		</inertial>
	</link>
	
	
	
	<joint name="joint1" type="continuous">
		<parent link="${namespace}/linkbase"/>
		<child link="${namespace}/link2"/>
		<origin xyz="0.0 ${width} -${0.03+height1/2}" rpy="0 0 0"/>
		<axis xyz="0 1 0"/>
		<dynamics damping="0"/>
	</joint>
	
	
	
	
	<!-- Middle Link -->
	<link name="${namespace}/link2">
		<collision>
			<origin xyz="0 0 -${height2/2 - axel_offset}" rpy="0 0 0"/>
			<geometry>
				<box size="${width} ${width} ${height2}"/>
			</geometry>
		</collision>
		
		<visual>
			<origin xyz="0 0 -${height2/2 - axel_offset}" rpy="0 0 0"/>
			<geometry>
				<box size="${width} ${width} ${height2}"/>
			</geometry>
			<material name="black"/>
		</visual>
		
		<inertial>
			<origin xyz="0 0 -${height2/2 - axel_offset}" rpy="0 0 0"/>
			<mass value="${masslink}"/>
			<inertia ixx="${masslink / 12.0 * (width*width + height2*height2)}" ixy="0.0" ixz="0.0"
				iyy="${masslink / 12.0 * (height2*height2 + width*width)}" iyz="0.0" izz="${masslink
				/ 12.0 * (width*width + width*width)}"/>
		</inertial>
	</link>
	
	
	<joint name="joint2" type="continuous">
		<parent link="${namespace}/link2"/>
		<child link="${namespace}/link3"/>
		<origin xyz="${width} 0 -${height2-axel_offset}" rpy="0 0 0"/>
		<axis xyz="1 0 0"/>
		<dynamics damping="0"/>
	</joint>
	
	<!-- Top Link -->
	<link name="${namespace}/link3">
		<collision>
			<origin xyz="0 0 -${height3/2 - axel_offset}" rpy="0 0 0"/>
			<geometry>
				<box size="${width} ${width} ${height3}"/>
			</geometry>
		</collision>
		
		<visual>
			<origin xyz="0 0 -${height3/2 - axel_offset}" rpy="0 0 0"/>
			<geometry>
				<box size="${width} ${width} ${height3}"/>
			</geometry>
			<material name="orange"/>
		</visual>
		
		<inertial>
			<origin xyz="0 0 -${height3/2 - axel_offset}" rpy="0 0 0"/>
			<mass value="${masslink}"/>
			<inertia ixx="${masslink / 12.0 * (width*width + height3*height3)}" ixy="0.0" ixz="0.0"
				iyy="${masslink / 12.0 * (height3*height3 + width*width)}" iyz="0.0" izz="${masslink
				/ 12.0 * (width*width + width*width)}"/>
		</inertial>
	</link>
	
	
	<link name="${namespace}/left_end_effector">
		<gravity>0</gravity>
		<visual>
			<origin rpy="0 0 0" xyz="0 0 0"/>
			<geometry>
				<box size="0.015 0.015 0.015"/>
			</geometry>
			<material name="transparent">
				<color rgba="0 0 0 0"/>
			</material>
		</visual>
		<inertial>
			<origin rpy="0 0 0" xyz="0.000000 0.000000 0.000000"/>
			<mass value="0.0001"/>
			<inertia ixx="1e-08" ixy="0" ixz="0" iyy="1e-08" iyz="0" izz="1e-08"/>
		</inertial>
	</link>
	
	
	
	<gazebo>
		<plugin name="gazebo_ros_vacuum_gripper" filename="libhello_world.so">
			<robotNamespace>${namespace}</robotNamespace>
			<bodyName>${namespace}/left_end_effector</bodyName>
			<topicName>grasping</topicName>
			<maxForce>5</maxForce>
			<maxDistance>0.2</maxDistance>
			<minDistance>0.05</minDistance>
		</plugin>
	</gazebo>
	
	<joint name="${namespace}/left_end_joint" type="revolute">
		<parent link="${namespace}/link3" />
		<child link="${namespace}/left_end_effector" />
		<origin xyz="0 -${width} -${height3-axel_offset}" rpy="0 0 0"/>
		<limit effort="30" velocity="1.0" lower="0" upper="0" />
	</joint>
	
	
	
	<!-- uncomment below if you wish to activate arm controller -->
	<!-- transmission name="tran1"-->
	<!-- type>transmission_interface/SimpleTransmission</type -->
	<!-- joint name="joint1"-->
	<!-- Choose between effort and trajectory controller -->
	<!-- hardwareInterface>EffortJointInterface</hardwareInterface -->
	<!-- hardwareInterface>PositionJointInterface</hardwareInterface -->
	<!-- /joint-->
	<!-- actuator name="motor11" -->
	<!-- hardwareInterface>EffortJointInterface</hardwareInterface -->
	<!-- hardwareInterface>PositionJointInterface</hardwareInterface -->
	<!-- mechanicalReduction>1</mechanicalReduction -->
	<!-- /actuator -->
	<!-- /transmission -->
	
	<!-- transmission name="tran2" -->
	<!-- type>transmission_interface/SimpleTransmission</type -->
	<!-- joint name="joint2" -->
	<!-- hardwareInterface>EffortJointInterface</hardwareInterface -->
	<!-- hardwareInterface>PositionJointInterface</hardwareInterface -->
	<!-- /joint -->
	<!-- actuator name="motor12" -->
	<!-- hardwareInterface>EffortJointInterface</hardwareInterface -->
	<!-- hardwareInterface>PositionJointInterface</hardwareInterface -->
	<!-- mechanicalReduction>1</mechanicalReduction -->
	<!-- /actuator -->
	<!-- /transmission -->
	
	<!-- gazebo -->
	<!-- plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so" -->
	<!-- robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType -->
	<!-- robotNamespace>/$(arg mav_name)</robotNamespace -->
	<!-- /plugin -->
	<!-- /gazebo -->
	
	<!-- This is to add gazebo details and the plugin details of the camera -->
	<gazebo reference="camera_link">
		<sensor type="depth" name="camera">
			<always_on>true</always_on>
			<update_rate>20</update_rate>
			<camera>
				<horizontal_fov>1.3962634</horizontal_fov>
				<image>
					<format>R8G8B8</format>
					<width>640</width>
					<height>480</height>
				</image>
				<clip>
					<near>0.05</near>
					<far>8.0</far>
				</clip>
			</camera>
			
			<plugin name="camera_controller" filename="libgazebo_ros_openni_kinect.so">
				<cameraName>camera</cameraName>
				<alwaysOn>true</alwaysOn>
				<updateRate>10</updateRate>
				<imageTopicName>image_raw</imageTopicName>
				<depthImageTopicName>depth/image_raw</depthImageTopicName>
				<pointCloudTopicName>depth/points</pointCloudTopicName>
				<cameraInfoTopicName>camera_info</cameraInfoTopicName>
				<depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
				<frameName>camera_link</frameName>
				<baseline>0.1</baseline>
				<distortion_k1>0.0</distortion_k1>
				<distortion_k2>0.0</distortion_k2>
				<distortion_k3>0.0</distortion_k3>
				<distortion_t1>0.0</distortion_t1>
				<distortion_t2>0.0</distortion_t2>
				<pointCloudCutoff>0.4</pointCloudCutoff>
			</plugin>
		</sensor>
	</gazebo>
	<!-- end of camera -->
	
</robot>
